{
  "translation": " Hello everyone, welcome to AWS Tutorials. In AWS Tutorials, we provide workshops and exercises to learn about AWS services. These workshops and exercises are published to our website aws.com. Today we are going to learn about EC2 Image Builder. EC2 Image Builder is used to create image pipelines in AWS. So let's understand fundamentals of this service. As I mentioned earlier, in EC2 Image Builder, you can really build a pipeline to customize your image and distribute to your end users. So you always start with your source image and then you create a pipeline. And in this pipeline, you can write the kind of customization you want on your source image. And then at the end of the customization, you can test your image to see if it has got all the customizations you wanted on your image or not. And then finally, your target image is distributed to the AWS regions for your end user to be consumed. So this is how the pipeline works. So let's understand some of the fundamental components involved in this pipeline building. So the first one is using the source image. So you can use both public and private image as a source image. And you can really use any of the operating systems. So you can select from Amazon Linux to Windows to Ubuntu to Red Hat. You talk about it. So you can select any of these type of images as your starting image or a source image. And again, keep in mind, you can select both public and private images. Next is using the build component. So the primary objective of the pipeline is to take a source image and then do certain customizations on the image. The customization could be that you want to install certain software or packages on the image. You want to configure your image in a certain way. So those kind of tasks you can perform into build component. Build component has got three phases. Validate, build and test. In the validate phase, you don't necessarily need to have all three phases, all these phases there. So in the validate phase, when you start your pipeline, you might want to validate your source image. And in that case, you write that kind of script under the validate phase. And then you have build phase. And in build phase, you write the script which you want to customize your image. At least you should have a build phase in your build component because the whole purpose of the pipeline is to customize your image. And that customization is done by the build phase. And finally, you have a test phase where you want to test your image to see if all the customizations you did earlier has been rightly implemented or not. So keep in mind, your pipeline goes through the cycle phases of validate, build and then test. So when you are building your component, you want to perform several types of actions. And there are certain out of box actions which you can use to perform those tasks. First three are the most important ones. So first one is execute binary, which is used to run any kind of executable you want. Second one is execute bash, which is used primarily on the Linux systems for running bash scripts. Then you have execute PowerShell, which are used on the Windows operating system images to run PowerShell scripts. Then you can reboot your image. You can update your operating system. You can upload, download files from the S3 bucket. So these are the actions which you can use into your build component to create the kind of customization you want for your image. Moving on, once you have customized the image, you have to then distribute your image. And when you're distributing your image, you have to give a name to the output image. You have to provide which region you want to distribute your image. And you can also decide whether you want a private image, a public image or you want to share the image. So those kind of configuration you can do from the image distribution point of view. So these are some of the basics you need to do to perform your pipeline creation. And if you don't understand much, don't worry. We are going to anyway do that as a part of the exercise. So let's see what we are going to build today. So what we are going to do is that we'll start with a Linux 2 image as the public image. We'll use a Linux 2 image as a source image. And then we'll write a custom build component which will simply go and convert that into an image which has say Python Boto3 SDK involved. So I tried not to go very complex script here because the purpose here is to understand how the pipeline component pipeline works. So basically you will take one Linux image and then you will write a required customization in your build component to generate a Linux image which has Python Boto3 SDK already deployed. So we'll start with a public image and move on to the private image. And during this course of pipeline execution, in order to get the progress of the pipeline, we will also configure a simple notification service which will send us an update about the pipeline through emails. OK, so this is what we are going to build today in the exercise. So here is an exercise which you can use. The URL of the exercise has been provided in the description box below. So you can run this exercise, provides you really detailed instructions about what activities to perform to complete this scenario end to end. Let me show you the steps of the exercise. So here is our aws hyphen dozo.com website where we have published our exercise. So we start with exercise. So first step is you need to have an AWS account in order to perform this exercise. And if not, you might want to create one trial version of the AWS account. Then we create a role and this role is used by image builder to perform different activities. So this role really authorizes EC2 image builder. So we create a role and we give this role certain permissions and then we give this role a name, say dozo EC2 role. So once we have created this role, then we create an SMS topic. And this SMS topic is actually used by EC2 image builder to publish the notification about the progress of the pipeline. So we create a topic called dozo pipeline topic. And once this topic has been created, we create one email subscription. And I have provided my personal email ID as your endpoint so that whenever the topic, whenever the topic receives a notification from the pipeline, it will email the notification to my email address. You will use your email address in this case, of course. And then when you once you use my email based subscription, you have to, of course, go to your email inbox and you have to confirm the subscription, which I have done here. So once this is done, then we move on to creating the pipeline. The first thing we create is the build component. And as I discussed earlier, the build components are used to provide the script or customization of the script, which are used to customize the image. And the customization which you want to do in this exercise is take a Linux image and install Python Boto3 SDK on that so that when my end user use that image, they already have Python Boto3 installed on that. Suppose I'm creating this image for my developers and this is a pipeline for that. So you go to the image builder, you click on components and then create the component. Then you the next step, you select your source operating system and you are saying our source operating. What operating system you want to use type of operating system. So you start with Amazon Linux 2, you give this component a nice name. Since you can have various versions of your pipeline or component, then you have to provide your version component, version number. So like major dot minor dot patch. So one point zero point zero. I'm going this case. Then you provide the script which you want to perform to customize your image. So in this case, I have used define your own document content. And this is the document I'm creating. So you can see here in this case, I'm using only the build page. So I'm not using the well written test because it's a very small pipeline. And in this case, I'm using this execute back section to perform this command. And what this command does is that installs Boto3 SDK on my Linux box. Pretty simple and straightforward. So once I have created this component, I save this component with dojo Boto component name. Now my component is ready so we can work on the pipeline. In order to work on the pipeline, you go back to your EC2 image builder console, click on the image pipeline and then create pipeline. And then it says, OK, tell me what is your source operating, your source image. So earlier you selected the type of operating system like Windows or Linux. Now here you're selecting the source image. And in this case, I said you can use either both public images as well as the private images. So in this case, what we are doing here is that we are using a Linux operating system. And then in the Linux operating system, you go and select the latest of the Linux image. You take the latest of the Linux image. Then you go next and then you say, OK, what build component you want to use to customize this image. And we have created this dojo Boto component earlier. So we are simply going to select this build component, which primarily installs Python Boto3 SDK on your source image. So we select this build component. And then it asks for the pipeline name, which gives a pipeline name called dojo Linux Boto pipeline. Then which role you want to use to perform the actions. And remember the very first step was to create the role which can be used by the pipeline. So we're providing the role name over here. Then it asks, how do you want to schedule it? So generally in the production moments, you want to go and schedule it because you want your pipeline to run at certain frequency to keep creating a new image for you. But in this case, since you're doing one of the exercises, so I selected for the manual so that I can manually trigger this pipeline. And then finally, it tells what kind of machine you want to choose to do your image customization. And you say, OK, you know what? Simply use the default image for the region. So easy to build or easy to image builder has got a default image for every region. So I'm just I'm saying simply go and use it. I don't want to provide any custom custom image, a custom easy to instance here. Then I'm configuring my SNS topic and which is primarily used to give me a notification about the image pipeline. Then on the output AMI, I'm simply saying, hey, this is my AMI name and these are my these are my tax if you want to configure tax. But in this case, you're saying this is my AMI name. So this is where you configure how your image is distributed, whether it's going to be public image or private image, whether it's going to be which region is going to be available and those kind of things. And after doing that, you simply save it and your pipeline is created. Once your pipeline is created, you can select the pipeline and say, I want to run the pipeline. When you have scheduled the pipeline, you don't need to do this because your pipeline will run automatically based on the schedule. But in this case, we have to click on manually execution of the pipeline. The pipeline execution can take some time. So really, if you can go if you want, you can go for a break at this point of time and wait. Wait till the status of the pipeline. So in fact, when you put on the pipeline, you click on the pipeline and go to this output image section and you can see the pipeline is usually progress. And it will take some time before your pipeline execution finishes, actually. So wait till the status of the output becomes available. At this point of time, you know that your pipeline is ready and actually you can and your output image is also created. And in order to validate it, you can go to the EC2 console and go to the AMI in the left hand menu. And if you go over there, you can see there is an image which is already created by this pipeline. Now, if you launch an EC2 instance using this image, then you will find that that EC2 instance will already have a Porto 3 Python SDK deployed on the machine. So this was all about this exercise. Follow the last section to clean up the resources so that you don't incur any cost post the post exercise. So that was all about this exercise. There are many other workshops and exercises in our AWS hyphens dojo website, which you can run to learn about AWS services. Hope you like this video and if you like this video, click on the like button. Please subscribe to our channel. If you have any feedback or requests for new comment, you can either provide that feedback in the YouTube channel or you can click on this contact us button to provide us the feedback. Hope you like this exercise. Thanks for your time. Have a nice day. Bye bye.",
  "transcription": " Hello everyone, welcome to AWS Tutorials. In AWS Tutorials, we provide workshops and exercises to learn about AWS services. These workshops and exercises are published to our website aws.com. Today we are going to learn about EC2 Image Builder. EC2 Image Builder is used to create image pipelines in AWS. So let's understand the fundamentals of this service. As I mentioned earlier, in EC2 Image Builder, you can really build a pipeline to customize your image and distribute to your end users. So you always start with your source image and then you create a pipeline. And in this pipeline, you can write the kind of customization you want on your source image. And then at the end of the customization, you can test your image to see if it has got all the customizations you wanted on your image or not. And then finally, your target image is distributed to the AWS regions for your end user to be consumed. So this is how the pipeline works. So let's understand some of the fundamental components involved in this pipeline building. So the first one is using the source image. So you can use both public and private image as a source image. And you can really use any of the operating systems. So you can select from Amazon Linux to Windows to Ubuntu to Red Hat. You talk about it. So you can select any of these type of images as your starting image or a source image. And again, keep in mind, you can select both public and private images. Next is using the build component. So the primary objective of the pipeline is to take a source image and then do certain customizations on the image. The customization could be that you want to install certain software or packages on the image. You want to configure your image in a certain way. So those kind of tasks you can perform into build component. Build component has got three phases. Validate, build and test. In the validate phase, you don't necessarily need to have all three phases, all these phases there. So in the validate phase, when you start your pipeline, you might want to validate your source image. And in that case, you write that kind of script under the validate phase. And then you have build phase. And in build phase, you write the script which you want to customize your image. At least you should have a build phase in your build component because the whole purpose of the pipeline is to customize your image. And that customization is done by the build phase. And finally, you have a test phase where you want to test your image to see if all the customizations you did earlier has been rightly implemented or not. So keep in mind, your pipeline goes through the cycle phases of validate, build and then test. So when you are building your component, you want to perform several types of actions. And there are certain out of box actions which you can use to perform those tasks. First three are the most important ones. So first one is execute binary, which is used to run any kind of executable you want. Second one is execute bash, which is used primarily on the Linux systems for running bash scripts. Then you have execute PowerShell, which are used on the Windows operating system images to run PowerShell scripts. Then you can reboot your image. You can update your operating system. You can upload, download files from the S3 bucket. So these are the actions which you can use into your build component to create the kind of customization you want for your image. Moving on, once you have customized the image, you have to then distribute your image. And when you're distributing your image, you have to give a name to the output image. You have to provide which region you want to distribute your image. And you can also decide whether you want a private image, a public image or you want to share the image. So those kind of configuration you can do from the image distribution point of view. So these are some of the basics you need to do to perform your pipeline creation. And if you don't understand much, don't worry. We are going to anyway do that as a part of the exercise. So let's see what we are going to build today. So what we are going to do is that we'll start with a Linux 2 image as the public image. We'll use a Linux 2 image as a source image. And then we'll write a custom build component which will simply go and convert that into an image which has say Python Boto3 SDK involved. So I tried not to go very complex script here because the purpose here is to understand how the pipeline component pipeline works. So basically you will take one Linux image and then you will write a required customization in your build component to generate a Linux image which has Python Boto3 SDK already deployed. So we'll start with a public image and move on to the private image. And during this course of pipeline execution, in order to get the progress of the pipeline, we will also configure a simple notification service which will send us an update about the pipeline through emails. OK, so this is what we are going to build today in the exercise. So here is an exercise which you can use. The URL of the exercise has been provided in the description box below. So you can run this exercise, provides you really detailed instructions about what activities to perform to complete this scenario end to end. Let me show you the steps of the exercise. So here is our aws hyphen dozo.com website where we have published our exercise. So we start with exercise. So first step is you need to have an AWS account in order to perform this exercise. And if not, you might want to create one trial version of the AWS account. Then we create a role and this role is used by image builder to perform different activities. So this role really authorizes EC2 image builder. So we create a role and we give this role certain permissions and then we give this role a name, say dozo EC2 role. So once we have created this role, then we create an SMS topic. And this SMS topic is actually used by EC2 image builder to publish the notification about the progress of the pipeline. So we create a topic called dozo pipeline topic. And once this topic has been created, we create one email subscription. And I have provided my personal email ID as your endpoint so that whenever the topic, whenever the topic receives a notification from the pipeline, it will email the notification to my email address. You will use your email address in this case, of course. And then when you once you use my email based subscription, you have to, of course, go to your email inbox and you have to confirm the subscription, which I have done here. So once this is done, then we move on to creating the pipeline. The first thing we create is the build component. And as I discussed earlier, the build components are used to provide the script or customization of the script, which are used to customize the image. And the customization which you want to do in this exercise is take a Linux image and install Python Boto3 SDK on that so that when my end user use that image, they already have Python Boto3 installed on that. Suppose I'm creating this image for my developers and this is a pipeline for that. So you go to the image builder, you click on components and then create the component. Then you the next step, you select your source operating system and you are saying our source operating. What operating system you want to use type of operating system. So you start with Amazon Linux 2, you give this component a nice name. Since you can have various versions of your pipeline or component, then you have to provide your version component, version number. So like major dot minor dot patch. So one point zero point zero. I'm going this case. Then you provide the script which you want to perform to customize your image. So in this case, I have used define your own document content. And this is the document I'm creating. So you can see here in this case, I'm using only the build page. So I'm not using the well written test because it's a very small pipeline. And in this case, I'm using this execute back section to perform this command. And what this command does is that installs Boto3 SDK on my Linux box. Pretty simple and straightforward. So once I have created this component, I save this component with dojo Boto component name. Now my component is ready so we can work on the pipeline. In order to work on the pipeline, you go back to your EC2 image builder console, click on the image pipeline and then create pipeline. And then it says, OK, tell me what is your source operating, your source image. So earlier you selected the type of operating system like Windows or Linux. Now here you're selecting the source image. And in this case, I said you can use either both public images as well as the private images. So in this case, what we are doing here is that we are using a Linux operating system. And then in the Linux operating system, you go and select the latest of the Linux image. You take the latest of the Linux image. Then you go next and then you say, OK, what build component you want to use to customize this image. And we have created this dojo Boto component earlier. So we are simply going to select this build component, which primarily installs Python Boto3 SDK on your source image. So we select this build component. And then it asks for the pipeline name, which gives a pipeline name called dojo Linux Boto pipeline. Then which role you want to use to perform the actions. And remember the very first step was to create the role which can be used by the pipeline. So we're providing the role name over here. Then it asks, how do you want to schedule it? So generally in the production moments, you want to go and schedule it because you want your pipeline to run at certain frequency to keep creating a new image for you. But in this case, since you're doing one of the exercises, so I selected for the manual so that I can manually trigger this pipeline. And then finally, it tells what kind of machine you want to choose to do your image customization. And you say, OK, you know what? Simply use the default image for the region. So easy to build or easy to image builder has got a default image for every region. So I'm just I'm saying simply go and use it. I don't want to provide any custom custom image, a custom easy to instance here. Then I'm configuring my SNS topic and which is primarily used to give me a notification about the image pipeline. Then on the output AMI, I'm simply saying, hey, this is my AMI name and these are my these are my tax if you want to configure tax. But in this case, you're saying this is my AMI name. So this is where you configure how your image is distributed, whether it's going to be public image or private image, whether it's going to be which region is going to be available and those kind of things. And after doing that, you simply save it and your pipeline is created. Once your pipeline is created, you can select the pipeline and say, I want to run the pipeline. When you have scheduled the pipeline, you don't need to do this because your pipeline will run automatically based on the schedule. But in this case, we have to click on manually execution of the pipeline. The pipeline execution can take some time. So really, if you can go if you want, you can go for a break at this point of time and wait. Wait till the status of the pipeline. So in fact, when you put on the pipeline, you click on the pipeline and go to this output image section and you can see the pipeline is usually progress. And it will take some time before your pipeline execution finishes, actually. So wait till the status of the output becomes available. At this point of time, you know that your pipeline is ready and actually you can and your output image is also created. And in order to validate it, you can go to the EC2 console and go to the AMI's in the left hand menu. And if you go over there, you can see there is an image which is already created by this pipeline. Now, if you launch an EC2 instance using this image, then you will find that that EC2 instance will already have a Boto3 Python SDK deployed on the machine. So this was all about this exercise. Follow the last section to clean up the resources so that you don't incur any cost post the post exercise. So that was all about this exercise. There are many other workshops and exercises in our AWS hyphens dojo website, which you can run to learn about AWS services. Hope you like this video and if you like this video, click on the like button. Please subscribe to our channel. If you have any feedback or requests for new comment, you can either provide that feedback in the YouTube channel or you can click on this contact us button to provide us the feedback. Hope you like this exercise. Thanks for your time. Have a nice day. Bye bye.",
  "detected_language": "english"
}
